/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DFT 0
#define NUM 1
#define PAD 2
#define SYM 3
#define ADJ 4
#define MED 5
#define ACC 6

&mt {
        flavor = "balanced";
        quick-tap-ms = <200>;
};

&sk {
        quick-release;
};

&caps_word {
    continue-list = <MINUS UNDER BSPC DEL>;
};

/ {
        combos {

/*
  0   1   2   3   4   5     6   7   8   9  10  11
 12  13  14  15  16  17    18  19  20  21  22  23
 24  25  26  27  28  29    30  31  32  33  34  35
             36  37  38    39  40  41
*/

compatible = "zmk,combos";

                combo_oelig { key-positions = < 1  2>; bindings = <&kp LA(Q)     >; layers = <DFT>; timeout-ms = <50>; };
                combo_euro  { key-positions = < 3  4>; bindings = <&kp LS(LA(N2))>; layers = <DFT>; timeout-ms = <50>; };
                combo_uml   { key-positions = < 7  8>; bindings = <&kp LA(U)     >; layers = <DFT>; timeout-ms = <50>; };
                combo_circ  { key-positions = < 8  9>; bindings = <&kp LA(I)     >; layers = <DFT>; timeout-ms = <50>; };
                combo_acute { key-positions = <19 20>; bindings = <&kp LA(E)     >; layers = <DFT>; timeout-ms = <50>; };
                combo_grave { key-positions = <20 21>; bindings = <&kp LA(GRAVE) >; layers = <DFT>; timeout-ms = <50>; };
                combo_tilde { key-positions = <30 31>; bindings = <&kp LA(N)     >; layers = <DFT>; timeout-ms = <50>; };

                combo_accents { key-positions = <15 16>; bindings = <&sl ACC>; layers = <DFT>; timeout-ms = <50>; };

                combo_adjust { key-positions = <11 23 35>; bindings = <&to ADJ>; layers = <DFT>; timeout-ms = <50>; };
                combo_media  { key-positions = <33 34 35>; bindings = <&to MED>; layers = <DFT>; timeout-ms = <50>; };
        };
        behaviors {
                td_shft: tap_dance_shift {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_SHIFT";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&sk LSHFT>, <&caps_word>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                alpha {
                        label = "alpha";
                        bindings = <
&kp ESC   &kp Q       &kp W       &kp E      &kp R      &kp T         &kp Y   &kp U      &kp I          &kp O         &kp P          &kp MINUS
&kp TAB   &kp A       &kp S       &kp D      &kp F      &kp G         &kp H   &kp J      &kp K          &kp L         &kp SEMI       &kp SQT
&kp GRAVE &mt LSHFT Z &mt LCTRL X &mt LALT C &mt LGUI V &kp B         &kp N   &mt RGUI M &mt RALT COMMA &mt RCTRL DOT &mt RSHFT FSLH &sk RCTRL
                                  &tog PAD   &td_shft   &lt NUM SPACE &mo SYM &kp BSPC    &kp DEL
                        >;
                };
                numrow {
                        label = "num";
                        bindings = <
&trans &kp EXCL      &kp AT       &kp HASH    &kp DLLR    &kp PRCNT &kp CARET &kp AMPS    &kp STAR    &kp PLUS      &kp EQUAL     &trans
&trans &kp N1        &kp N2       &kp N3      &kp N4      &kp N5    &kp N6    &kp N7      &kp N8      &kp N9        &kp N0        &trans
&kp F1 &mt LSHFT F2  &mt LCTRL F3 &mt LALT F4 &mt LGUI F5 &kp F6    &kp F7    &mt RGUI F8 &mt RALT F9 &mt RCTRL F10 &mt RSHFT F11 &kp F12
                                  &trans      &trans      &kp SPACE &kp RET   &trans      &trans
                        >;
                };
                numpad {
                        label = "pad";
                        bindings = <
&none &none &kp N7 &kp N8 &kp N9 &none  &none  &none    &none    &none     &none     &none
&none &none &kp N4 &kp N5 &kp N6 &none  &none  &none    &none    &none     &none     &none
&none &none &kp N1 &kp N2 &kp N3 &none  &none  &kp RGUI &kp RALT &kp RCTRL &kp RSHFT &none
                   &trans &kp N0 &trans &trans &trans &trans
                        >;
                };
                symbol {
                        label = "sym";
                        bindings = <
&trans &kp ESC &kp HOME &kp UP    &kp END    &kp PG_UP &none     &kp LPAR &kp PIPE  &kp BSLH  &kp RPAR &none 
&trans &kp TAB &kp LEFT &kp DOWN  &kp RIGHT  &kp PG_DN &kp QMARK &kp LBRC &kp MINUS &kp UNDER &kp RBRC &none 
&trans &kp ESC &kp TAB  &kp TILDE &kp GRAVE  &none     &kp FSLH  &kp LBKT &kp SQT   &kp DQT   &kp RBKT &none
                        &trans    &caps_word &trans    &kp RET   &trans   &trans
                        >;
                };
                adjust {
                        label = "adj";
                        bindings = <
&to DFT &none &none &none &none &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none 
&none   &none &none &none &none &none &out OUT_BLE &out OUT_USB &out OUT_TOG &none        &none        &none 
&none   &none &none &none &none &none &bt BT_CLR   &none        &none        &none        &none        &none 
                   &none  &none &none &none        &none        &none
                        >;
                };
                media {
                        label = "media";
                        bindings = <
&none &none &kp I    &kp O     &kp UP   &kp C_VOL_UP &kp C_VOL_UP &kp UP   &none   &kp LG(W) &kp I    &kp O
&none &none &kp J    &kp K     &kp DOWN &kp C_VOL_DN &kp C_VOL_DN &kp DOWN &none   &none     &kp J    &kp K 
&none &none &kp LEFT &kp RIGHT &none    &kp C_MUTE   &kp C_MUTE   &to DFT  &none   &none     &kp LEFT &kp RIGHT 
                     &kp RET   &kp ESC  &kp SPACE    &kp SPACE    &kp ESC  &kp RET
                        >;
                };
                accents {
                        label = "acc";
                        bindings = <
&none &kp LA(Q) &none &kp LS(LA(N2)) &none &none &none     &kp LA(U) &kp LA(I)     &none &none &none
&none &none     &none &none          &none &none &none     &kp LA(E) &kp LA(GRAVE) &none &none &none
&none &none     &none &none          &none &none &kp LA(N) &none     &none         &none &none &none
                      &none          &none &none &none     &none     &none
                        >;
                };
        };
};
