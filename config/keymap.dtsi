#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define DFT 0

#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4

#define MOV 5
#define ACC 6
#define ADJ 7

#define MED 8

#define ___ &none

// see https://zmk.dev/docs/behaviors/hold-tap#example-use-cases
#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&sk {
    quick-release;
};

&caps_word {
    continue-list = <MINUS UNDER BSPC DEL>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_acc {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <DFT>;
            bindings = <&sl ACC>;
        };
        combo_bt_clr_left {
            timeout-ms = <50>;
            key-positions = <1 5>;
            layers = <ADJ>;
            bindings = <&bt BT_CLR>;
        };
        combo_bt_clr_right {
            timeout-ms = <50>;
            key-positions = <6 10>;
            layers = <ADJ>;
            bindings = <&bt BT_CLR>;
        };
/*
  0     1   2   3   4   5     6   7   8   9  10    11
 12    13  14  15  16  17    18  19  20  21  22    23
 24    25  26  27  28  29    30  31  32  33  34    35
               36  37  38    39  40  41
*/
    };
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        shift: shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
        gtab: gtab {
            compatible = "zmk,behavior-tri-state";
            label = "GUI_TAB";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <3 32>;
        };
        lrsw: lrsw {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_REVERSE_SWITCHER";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(TAB))>, <&kp LS(TAB)>;
            mods = <MOD_LGUI>;
            keep-mods = <MOD_LGUI>;
        };
        rrsw: rrsw {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_REVERSE_SWITCHER";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>, <&kp LS(TAB)>;
            mods = <MOD_LGUI>;
            keep-mods = <MOD_LGUI>;
        };
    };
    macros {
        kill_word: kill_word {
            label = "kill_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ESC &kp D>;
        };
        tmux_prev: tmux_prev {
            label = "tmux_prev";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(Q) &kp P>;
        };
        tmux_next: tmux_next {
            label = "tmux_next";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(Q) &kp N>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        alpha {
            label = "alpha";
            bindings = <
&kp ESC        &kp Q &kp W &kp     E &kp   R &kp     T        &kp   Y &kp   U &kp     I &kp   O &kp    P        &sl ADJ
&kp TAB        &kp A &kp S &kp     D &kp   F &kp     G        &kp   H &kp   J &kp     K &kp   L &kp SEMI        &sl FUN
&sl ACC        &kp Z &kp X &kp     C &kp   V &kp     B        &kp   N &kp   M &kp COMMA &kp DOT &kp FSLH        &kp LC(LG(SPACE))
                           &shift    &mo SYM &kp SPACE        &mo MOV &mo NUM &mo   NAV
            >;
        };
        num {
            label = "num";
            bindings = <
&kp SEMI           &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT        &kp CARET &kp     AMPS &kp STAR &kp PLUS  &kp EQUAL        ___  
&kp MINUS          &kp   N1 &kp N2 &kp   N3 &kp   N4 &kp    N5        &kp  BKSP &sk     LGUI &sk LALT &sk LCTRL &sk LSHFT        ___  
&kp UNDER          &kp   N6 &kp N7 &kp   N8 &kp   N9 &kp    N0        &kp   DEL &kp LA(BKSP) &trans   &trans    &trans           ___  
                                   &trans   &shift   &trans           &trans    &trans       &trans
            >;
        };
        sym {
            label = "sym";
            bindings = <
___          &kp LS(LG(GRAVE)) &gtab     &lrsw     &kp LC(TAB) &kp LG(GRAVE)        &kp LA(BKSP) &kp    LPAR &kp  PIPE &kp  BSLH &kp RPAR        ___  
___          &sk LSHFT         &sk LCTRL &sk  LALT &sk    LGUI ___                  &kp     BKSP &kp    LBRC &kp MINUS &kp UNDER &kp RBRC        ___  
___          &kp   ESC         &kp   TAB &kp TILDE &kp   GRAVE ___                  &kp      DEL &kp    LBKT &kp   SQT &kp   DQT &kp RBKT        ___  
                                         &trans    &trans      &trans               &kp      RET MO_TOG(NAV) &trans
            >;
        };
        nav {
            label = "nav";
            bindings = <
___        ___ &kp HOME &kp   UP &kp   END &kp PG_UP        &kp LA(BKSP) ___      ___      ___       ___              ___  
___        ___ &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN        &kp     BKSP &sk LGUI &sk LALT &sk LCTRL &sk LSHFT        ___  
___        ___ ___      ___      ___       ___              &kp      DEL ___      ___      ___       ___              ___
                        &trans   &trans    &trans           &trans       &tog NAV &trans
            >;
        };
        fun {
            label = "fun";
            bindings = <
___        &kp F9 &kp F10 &kp F11 &kp F12 ___        ___ ___      ___      ___       ___              ___
___        &kp F5 &kp F6  &kp F7  &kp F8  ___        ___ &sk LGUI &sk LALT &sk LCTRL &sk LSHFT        ___
___        &kp F1 &kp F2  &kp F3  &kp F4  ___        ___ ___      ___      ___       ___              ___
                          ___     ___     ___        ___ ___ ___
            >;
        };
        mov {
            label = "mov";
            bindings = <
___          ___ ___ ___ &kp  LC(W) &kill_word           &kp    LA(LG(LEFT))  &kp    LA(LG(RIGHT))  &kp LA(LG(F)) ___       ___                  ___  
___          ___ ___ ___ &kp  LA(B) &kp  LA(F)           &kp LC(LA(LG(LEFT))) &kp LC(LA(LG(RIGHT))) ___           &kp LC(R) ___                  ___  
___          ___ ___ ___ &tmux_prev &tmux_next           &kp    LS(LG(GRAVE)) &kp LS(LC(TAB))       &rrsw         &gtab     &kp LG(GRAVE)        ___            
                     ___ ___        ___                  &trans               &trans                &trans
            >;
        };
        accents {
            label = "acc";
            bindings = <
___          &kp LA(Q)   ___   &kp LS(LA(N2)) ___    ___          ___       &kp LA(U) &kp     LA(I) ___   ___          ___  
___          &kp LA(SQT) ___   ___            ___    ___          ___       &kp LA(E) &kp LA(GRAVE) ___   ___          ___  
___          ___         ___   &kp      LA(C) ___    ___          &kp LA(N) ___       ___           ___   ___          ___  
                               &trans         &trans &trans       &trans    &trans    &trans
            >;
        };
        adjust {
            label = "adj";
            bindings = <
&to DFT      ___          &out OUT_USB &out     OUT_TOG &out      OUT_BLE ___                      ___               &out      OUT_BLE &out     OUT_TOG &out OUT_USB ___                 ___   
___          &bt BT_SEL 0 &bt BT_SEL 1 &bt     BT_SEL 2 &bt      BT_SEL 3 &bt      BT_SEL 4        &bt      BT_SEL 4 &bt      BT_SEL 3 &bt     BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0        ___   
___          &bootloader  &sys_reset   &ext_power EP_ON &ext_power EP_TOG &ext_power EP_OFF        &ext_power EP_OFF &ext_power EP_TOG &ext_power EP_ON &sys_reset   &bootloader         &to MED
                                       &trans           &trans            &trans                   &trans            &trans            &trans
            >;
        };
        media {
            label = "media";
            bindings = <
&kp    I        &kp     O &kp LG(W)  ___     &kp   UP &kp C_VOL_UP        &kp C_VOL_UP &kp   UP ___     &kp LG(W) &kp    I        &kp     O
&kp    J        &kp     K ___        ___     &kp DOWN &kp C_VOL_DN        &kp C_VOL_DN &kp DOWN ___     ___       &kp    J        &kp     K 
&kp LEFT        &kp RIGHT ___        ___     &to  DFT &kp   C_MUTE        &kp   C_MUTE &to  DFT ___     ___       &kp LEFT        &kp RIGHT 
                                     &kp ESC &kp  RET &kp    SPACE        &kp    SPACE &kp  RET &kp ESC
            >;
        };
    };
};
