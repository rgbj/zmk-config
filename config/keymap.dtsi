#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define DFT 0
#define SYM 1
#define NUM 2
#define NAV 3

#define ADJ 4

#define FUN 5
#define ACC 6
#define MED 7

#define ___ &none

// see https://zmk.dev/docs/behaviors/hold-tap#example-use-cases
#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&sk {
    quick-release;
};

&caps_word {
    continue-list = <MINUS UNDER BSPC DEL>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_acc {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <DFT>;
            bindings = <&sl ACC>;
        };
        combo_bt_clr_left {
            timeout-ms = <50>;
            key-positions = <1 5>;
            layers = <ADJ>;
            bindings = <&bt BT_CLR>;
        };
        combo_bt_clr_right {
            timeout-ms = <50>;
            key-positions = <6 10>;
            layers = <ADJ>;
            bindings = <&bt BT_CLR>;
        };
/*
  0     1   2   3   4   5     6   7   8   9  10    11
 12    13  14  15  16  17    18  19  20  21  22    23
 24    25  26  27  28  29    30  31  32  33  34    35
               36  37  38    39  40  41
*/
    };
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        shift: shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
        cs: cs {
            compatible = "zmk,behavior-mod-morph";
            label = "CS";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT)>;
        };
        dc: dc {
            compatible = "zmk,behavior-mod-morph";
            label = "DC";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };
        gtab: gtab {
            compatible = "zmk,behavior-tri-state";
            label = "GUI_TAB";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <3 32>;
        };
        lrsw: lrsw {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_REVERSE_SWITCHER";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(TAB))>, <&kp LS(TAB)>;
            mods = <MOD_LGUI>;
            keep-mods = <MOD_LGUI>;
        };
        rrsw: rrsw {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_REVERSE_SWITCHER";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>, <&kp LS(TAB)>;
            mods = <MOD_LGUI>;
            keep-mods = <MOD_LGUI>;
        };
        lpair: lpair { mods = <MOD_LCTL>; bindings = <&lpa_2  >, <&kp LT  >; label = "LPAIR"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; };
        lpa_2: lpa_2 { mods = <MOD_LALT>; bindings = <&lpa_3  >, <&kp LBKT>; label = "LPA_2"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; };
        lpa_3: lpa_3 { mods = <MOD_LGUI>; bindings = <&kp LPAR>, <&kp LBRC>; label = "LPA_3"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; };
        rpair: rpair { mods = <MOD_LCTL>; bindings = <&rpa_2  >, <&kp GT  >; label = "RPAIR"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; };
        rpa_2: rpa_2 { mods = <MOD_LALT>; bindings = <&rpa_3  >, <&kp RBKT>; label = "RPA_2"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; };
        rpa_3: rpa_3 { mods = <MOD_LGUI>; bindings = <&kp RPAR>, <&kp RBRC>; label = "RPA_3"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; };
    };
    macros {
        kill_word: kill_word {
            label = "kill_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ESC &kp D>;
        };
        tmux_prev: tmux_prev {
            label = "tmux_prev";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(Q) &kp P>;
        };
        tmux_next: tmux_next {
            label = "tmux_next";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LC(Q) &kp N>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        alpha {
            label = "alpha";
            bindings = <
&kp ESC          &kp Q &kp W &kp     E &kp   R &kp     T        &kp   Y &kp   U &kp     I &kp   O &kp    P        &sl ADJ
&kp TAB          &kp A &kp S &kp     D &kp   F &kp     G        &kp   H &kp   J &kp     K &kp   L &kp  SQT        &sl FUN
&kp GRAVE        &kp Z &kp X &kp     C &kp   V &kp     B        &kp   N &kp   M &cs       &dc     &kp FSLH        &kp LC(LG(SPACE))
                             &shift    &mo SYM &kp SPACE        &mo NAV &mo NUM &shift
            >;
        };
        sym {
            label = "sym";
            bindings = <
&trans          &kp LS(LG(GRAVE)) &gtab     &lrsw    &kp LC(TAB) &kp LG(GRAVE)        &kp LA(BKSP) &lpair      &kp    PIPE &kp  BSLH &rpair        &trans
&trans          &sk         LSHFT &sk LCTRL &sk LALT &sk    LGUI ___                  &kp     BKSP ___         &kp   MINUS &kp UNDER ___           &trans
&trans          &kp          EXCL &kp    AT &kp HASH &kp    DLLR &kp PRCNT            &kp      DEL ___         ___         ___       ___           &trans
                                            &trans    &trans     &trans               &kp      RET MO_TOG(NUM) MO_TOG(NAV)
            >;
        };
        num {
            label = "num";
            bindings = <
&trans        &kp UNDER &kp N7 &kp N8 &kp N9 &kp LA(BKSP)        &kp CARET &kp     AMPS &kp STAR &kp PLUS  &kp EQUAL        &trans  
&trans        &kp MINUS &kp N4 &kp N5 &kp N6 &kp     BKSP        ___       &sk     LGUI &sk LALT &sk LCTRL &sk LSHFT        &trans  
&trans        &kp SEMI  &kp N1 &kp N2 &kp N3 &kp      DEL        ___       ___          &trans   &trans    &trans           &trans  
                               &trans &kp N0 &trans              &trans    &tog NUM     &trans
            >;
        };
        nav {
            label = "nav";
            bindings = <
&trans        ___        &kp HOME   &kp   UP   &kp   END  &kp PG_UP        &kp    LA(LG(LEFT))  &kp    LA(LG(RIGHT))  &kp LA(LG(F)) &kp  LC(W) &kill_word        &trans
&trans        ___        &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN        &kp LC(LA(LG(LEFT))) &kp LC(LA(LG(RIGHT))) &kp LC(Q)     &kp LC(R) ___                &trans
&trans        &tmux_prev &tmux_next &kp  LA(B) &kp  LA(F) ___              ___                  ___                   ___           ___       ___                &trans
                                    &trans     &trans     &shift           &trans               &trans                &tog NAV
            >;
        };
        adjust {
            label = "adj";
            bindings = <
&to DFT      ___          &out OUT_USB &out     OUT_TOG &out      OUT_BLE ___                      ___               &out      OUT_BLE &out     OUT_TOG &out OUT_USB ___                 ___
___          &bt BT_SEL 0 &bt BT_SEL 1 &bt     BT_SEL 2 &bt      BT_SEL 3 &bt      BT_SEL 4        &bt      BT_SEL 4 &bt      BT_SEL 3 &bt     BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0        ___
___          &bootloader  &sys_reset   &ext_power EP_ON &ext_power EP_TOG &ext_power EP_OFF        &ext_power EP_OFF &ext_power EP_TOG &ext_power EP_ON &sys_reset   &bootloader         &to MED
                                       &trans           &trans            &trans                   &trans            &trans            &trans
            >;
        };
        fun {
            label = "fun";
            bindings = <
___        &kp F9 &kp F10 &kp F11 &kp F12 ___        ___ ___      ___      ___       ___              ___
___        &kp F5 &kp F6  &kp F7  &kp F8  ___        ___ &sk LGUI &sk LALT &sk LCTRL &sk LSHFT        ___
___        &kp F1 &kp F2  &kp F3  &kp F4  ___        ___ ___      ___      ___       ___              ___
                          ___     ___     ___        ___ ___ ___
            >;
        };
        accents {
            label = "acc";
            bindings = <
___          &kp LA(Q)   ___   &kp LS(LA(N2)) ___    ___          ___       &kp LA(U) &kp     LA(I) ___   ___          ___
___          &kp LA(SQT) ___   ___            ___    ___          ___       &kp LA(E) &kp LA(GRAVE) ___   ___          ___
___          ___         ___   &kp      LA(C) ___    ___          &kp LA(N) ___       ___           ___   ___          ___
                               &trans         &trans &trans       &trans    &trans    &trans
            >;
        };
        media {
            label = "media";
            bindings = <
&kp    I        &kp     O &kp LG(W)  ___     &kp   UP &kp C_VOL_UP        &kp C_VOL_UP &kp   UP ___     &kp LG(W) &kp    I        &kp     O
&kp    J        &kp     K ___        ___     &kp DOWN &kp C_VOL_DN        &kp C_VOL_DN &kp DOWN ___     ___       &kp    J        &kp     K 
&kp LEFT        &kp RIGHT ___        ___     &to  DFT &kp   C_MUTE        &kp   C_MUTE &to  DFT ___     ___       &kp LEFT        &kp RIGHT 
                                     &kp ESC &kp  RET &kp    SPACE        &kp    SPACE &kp  RET &kp ESC
            >;
        };
    };
};
